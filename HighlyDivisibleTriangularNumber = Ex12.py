#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?

import math
from functools import reduce

def highlyDivisibleTriangularNumber(maxDiv):
    n = 28

    while True:
        triangleNumber = n * (n + 1) / 2
        n = n + 1
        primes = {}
        i = 2
        while i <= triangleNumber:
            if triangleNumber % i == 0:
                triangleNumber = triangleNumber / i
                if i in primes:
                    primes[i] += 1
                else:
                    primes[i] = 1
                i -= 1
            i += 1

        powers = map(lambda x: (x + 1), primes.values())
        divisors = reduce(lambda x, y: x * y, powers)
        if divisors > maxDiv:
            return int(((n - 1) * (n) / 2))


print(highlyDivisibleTriangularNumber(500))




